<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on sqjian's blog</title><link>https://sqjian.github.io/tags/go/</link><description>Recent content in go on sqjian's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; &lt;a href="https://github.com/natarajmb">Nataraj Basappa&lt;/a> 2018</copyright><lastBuildDate>Wed, 02 Apr 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://sqjian.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>(Hu)go Template Primer</title><link>https://sqjian.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%9E%B6%E6%9E%84/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://sqjian.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%9E%B6%E6%9E%84/</guid><description>1、整体架构 1.1、核心组件： etcd保存了整个集群的状态； apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制； controller manager负责维护集群的状态，比如故障检测、自动扩展、滚动更新等； scheduler负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上； kubelet负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理； Container runtime负责镜像管理以及Pod和容器的真正运行（CRI）； kube-proxy负责为Service提供cluster内部的服务发现和负载均衡； 1.2、附加组件： kube-dns负责为整个集群提供DNS服务 Ingress Controller为服务提供外网入口 Heapster提供资源监控 Dashboard提供GUI Federation提供跨可用区的集群 Fluentd-elasticsearch提供集群日志采集、存储与查询 2、分层架构 核心层：Kubernetes最核心的功能，对外提供API构建高层的应用，对内提供插件式应用执行环境 应用层：部署（无状态应用、有状态应用、批处理任务、集群应用等）和路由（服务发现、DNS解析等） 管理层：系统度量（如基础设施、容器和网络的度量），自动化（如自动扩展、动态Provision等）以及策略管理（RBAC、Quota、PSP、NetworkPolicy等） 接口层：kubectl命令行工具、客户端SDK以及集群联邦 生态系统：在接口层之上的庞大容器集群管理调度的生态系统，可以划分为两个范畴 Kubernetes外部：日志、监控、配置管理、CI、CD、Workflow、FaaS、OTS应用、ChatOps等 Kubernetes内部：CRI、CNI、CVI、镜像仓库、Cloud Provider、集群自身的配置和管理等</description></item></channel></rss>